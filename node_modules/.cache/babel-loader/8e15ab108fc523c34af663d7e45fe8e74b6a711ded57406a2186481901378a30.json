{"ast":null,"code":"/**\n * @license lucide v0.542.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createElement from './createElement.js';\nimport defaultAttributes from './defaultAttributes.js';\nconst getAttrs = element => Array.from(element.attributes).reduce((attrs, attr) => {\n  attrs[attr.name] = attr.value;\n  return attrs;\n}, {});\nconst getClassNames = attrs => {\n  if (typeof attrs === \"string\") return attrs;\n  if (!attrs || !attrs.class) return \"\";\n  if (attrs.class && typeof attrs.class === \"string\") {\n    return attrs.class.split(\" \");\n  }\n  if (attrs.class && Array.isArray(attrs.class)) {\n    return attrs.class;\n  }\n  return \"\";\n};\nconst combineClassNames = arrayOfClassnames => {\n  const classNameArray = arrayOfClassnames.flatMap(getClassNames);\n  return classNameArray.map(classItem => classItem.trim()).filter(Boolean).filter((value, index, self) => self.indexOf(value) === index).join(\" \");\n};\nconst toPascalCase = string => string.replace(/(\\w)(\\w*)(_|-|\\s*)/g, (g0, g1, g2) => g1.toUpperCase() + g2.toLowerCase());\nconst replaceElement = (element, {\n  nameAttr,\n  icons,\n  attrs\n}) => {\n  const iconName = element.getAttribute(nameAttr);\n  if (iconName == null) return;\n  const ComponentName = toPascalCase(iconName);\n  const iconNode = icons[ComponentName];\n  if (!iconNode) {\n    return console.warn(`${element.outerHTML} icon name was not found in the provided icons object.`);\n  }\n  const elementAttrs = getAttrs(element);\n  const iconAttrs = {\n    ...defaultAttributes,\n    \"data-lucide\": iconName,\n    ...attrs,\n    ...elementAttrs\n  };\n  const classNames = combineClassNames([\"lucide\", `lucide-${iconName}`, elementAttrs, attrs]);\n  if (classNames) {\n    Object.assign(iconAttrs, {\n      class: classNames\n    });\n  }\n  const svgElement = createElement(iconNode, iconAttrs);\n  return element.parentNode?.replaceChild(svgElement, element);\n};\nexport { combineClassNames, replaceElement as default, getAttrs, getClassNames };","map":{"version":3,"names":["getAttrs","element","Array","from","attributes","reduce","attrs","attr","name","value","getClassNames","class","split","isArray","combineClassNames","arrayOfClassnames","classNameArray","flatMap","map","classItem","trim","filter","Boolean","index","self","indexOf","join","toPascalCase","string","replace","g0","g1","g2","toUpperCase","toLowerCase","replaceElement","nameAttr","icons","iconName","getAttribute","ComponentName","iconNode","console","warn","outerHTML","elementAttrs","iconAttrs","defaultAttributes","classNames","Object","assign","svgElement","createElement","parentNode","replaceChild"],"sources":["/Users/sumitkumar/Desktop/Arogya/Frontend/arogyaPatient/node_modules/lucide/src/replaceElement.ts"],"sourcesContent":["import createElement from './createElement';\nimport defaultAttributes from './defaultAttributes';\nimport { Icons } from './types';\n\nexport type CustomAttrs = { [attr: string]: any };\n\n/**\n * Get the attributes of an HTML element.\n * @param {HTMLElement} element\n * @returns {Object}\n */\nexport const getAttrs = (element: Element): Record<string, string> =>\n  Array.from(element.attributes).reduce<Record<string, string>>((attrs, attr) => {\n    attrs[attr.name] = attr.value;\n    return attrs;\n  }, {});\n\n/**\n * Gets the classNames of an attributes Object.\n * @param {Object} attrs\n * @returns {Array}\n */\nexport const getClassNames = (\n  attrs: Record<string, string | string[]> | string,\n): string | string[] => {\n  if (typeof attrs === 'string') return attrs;\n  if (!attrs || !attrs.class) return '';\n  if (attrs.class && typeof attrs.class === 'string') {\n    return attrs.class.split(' ');\n  }\n  if (attrs.class && Array.isArray(attrs.class)) {\n    return attrs.class;\n  }\n  return '';\n};\n\n/**\n * Combines the classNames of array of classNames to a String\n * @param {array} arrayOfClassnames\n * @returns {string}\n */\nexport const combineClassNames = (\n  arrayOfClassnames: (string | Record<string, string | string[]>)[],\n) => {\n  const classNameArray = arrayOfClassnames.flatMap(getClassNames);\n\n  return classNameArray\n    .map((classItem) => classItem.trim())\n    .filter(Boolean)\n    .filter((value, index, self) => self.indexOf(value) === index)\n    .join(' ');\n};\n\nconst toPascalCase = (string: string): string =>\n  string.replace(/(\\w)(\\w*)(_|-|\\s*)/g, (g0, g1, g2) => g1.toUpperCase() + g2.toLowerCase());\n\ninterface ReplaceElementOptions {\n  nameAttr: string;\n  icons: Icons;\n  attrs: Record<string, string>;\n}\n\n/**\n * ReplaceElement, replaces the given element with the created icon.\n * @param {HTMLElement} element\n * @param {{ nameAttr: string, icons: object, attrs: object }} options: { nameAttr, icons, attrs }\n * @returns {Function}\n */\nconst replaceElement = (element: Element, { nameAttr, icons, attrs }: ReplaceElementOptions) => {\n  const iconName = element.getAttribute(nameAttr);\n\n  if (iconName == null) return;\n\n  const ComponentName = toPascalCase(iconName);\n\n  const iconNode = icons[ComponentName];\n\n  if (!iconNode) {\n    return console.warn(\n      `${element.outerHTML} icon name was not found in the provided icons object.`,\n    );\n  }\n\n  const elementAttrs = getAttrs(element);\n\n  const iconAttrs = {\n    ...defaultAttributes,\n    'data-lucide': iconName,\n    ...attrs,\n    ...elementAttrs,\n  };\n\n  const classNames = combineClassNames(['lucide', `lucide-${iconName}`, elementAttrs, attrs]);\n\n  if (classNames) {\n    Object.assign(iconAttrs, {\n      class: classNames,\n    });\n  }\n\n  const svgElement = createElement(iconNode, iconAttrs);\n\n  return element.parentNode?.replaceChild(svgElement, element);\n};\n\nexport default replaceElement;\n"],"mappings":";;;;;;;;;AAWO,MAAMA,QAAA,GAAYC,OAAA,IACvBC,KAAA,CAAMC,IAAA,CAAKF,OAAA,CAAQG,UAAU,EAAEC,MAAA,CAA+B,CAACC,KAAA,EAAOC,IAAA,KAAS;EAC7ED,KAAA,CAAMC,IAAA,CAAKC,IAAI,IAAID,IAAA,CAAKE,KAAA;EACxB,OAAOH,KAAA;AACT,GAAG,EAAE;AAOA,MAAMI,aAAA,GACXJ,KAAA,IACsB;EACtB,IAAI,OAAOA,KAAA,KAAU,UAAU,OAAOA,KAAA;EACtC,IAAI,CAACA,KAAA,IAAS,CAACA,KAAA,CAAMK,KAAA,EAAO,OAAO;EACnC,IAAIL,KAAA,CAAMK,KAAA,IAAS,OAAOL,KAAA,CAAMK,KAAA,KAAU,UAAU;IAClD,OAAOL,KAAA,CAAMK,KAAA,CAAMC,KAAA,CAAM,GAAG;EAC9B;EACA,IAAIN,KAAA,CAAMK,KAAA,IAAST,KAAA,CAAMW,OAAA,CAAQP,KAAA,CAAMK,KAAK,GAAG;IAC7C,OAAOL,KAAA,CAAMK,KAAA;EACf;EACA,OAAO;AACT;AAOO,MAAMG,iBAAA,GACXC,iBAAA,IACG;EACH,MAAMC,cAAA,GAAiBD,iBAAA,CAAkBE,OAAA,CAAQP,aAAa;EAE9D,OAAOM,cAAA,CACJE,GAAA,CAAKC,SAAA,IAAcA,SAAA,CAAUC,IAAA,EAAM,EACnCC,MAAA,CAAOC,OAAO,EACdD,MAAA,CAAO,CAACZ,KAAA,EAAOc,KAAA,EAAOC,IAAA,KAASA,IAAA,CAAKC,OAAA,CAAQhB,KAAK,MAAMc,KAAK,EAC5DG,IAAA,CAAK,GAAG;AACb;AAEA,MAAMC,YAAA,GAAgBC,MAAA,IACpBA,MAAA,CAAOC,OAAA,CAAQ,uBAAuB,CAACC,EAAA,EAAIC,EAAA,EAAIC,EAAA,KAAOD,EAAA,CAAGE,WAAA,EAAY,GAAID,EAAA,CAAGE,WAAA,EAAa;AAc3F,MAAMC,cAAA,GAAiBA,CAAClC,OAAA,EAAkB;EAAEmC,QAAA;EAAUC,KAAA;EAAO/B;AAAA,CAAM,KAA6B;EAC9F,MAAMgC,QAAA,GAAWrC,OAAA,CAAQsC,YAAA,CAAaH,QAAQ;EAE9C,IAAIE,QAAA,IAAY,MAAM;EAEtB,MAAME,aAAA,GAAgBb,YAAA,CAAaW,QAAQ;EAE3C,MAAMG,QAAA,GAAWJ,KAAA,CAAMG,aAAa;EAEpC,IAAI,CAACC,QAAA,EAAU;IACb,OAAOC,OAAA,CAAQC,IAAA,CACb,GAAG1C,OAAA,CAAQ2C,SAAS,yDACtB;EACF;EAEA,MAAMC,YAAA,GAAe7C,QAAA,CAASC,OAAO;EAErC,MAAM6C,SAAA,GAAY;IAChB,GAAGC,iBAAA;IACH,eAAeT,QAAA;IACf,GAAGhC,KAAA;IACH,GAAGuC;EAAA,CACL;EAEA,MAAMG,UAAA,GAAalC,iBAAA,CAAkB,CAAC,UAAU,UAAUwB,QAAQ,IAAIO,YAAA,EAAcvC,KAAK,CAAC;EAE1F,IAAI0C,UAAA,EAAY;IACdC,MAAA,CAAOC,MAAA,CAAOJ,SAAA,EAAW;MACvBnC,KAAA,EAAOqC;IAAA,CACR;EACH;EAEA,MAAMG,UAAA,GAAaC,aAAA,CAAcX,QAAA,EAAUK,SAAS;EAEpD,OAAO7C,OAAA,CAAQoD,UAAA,EAAYC,YAAA,CAAaH,UAAA,EAAYlD,OAAO;AAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}