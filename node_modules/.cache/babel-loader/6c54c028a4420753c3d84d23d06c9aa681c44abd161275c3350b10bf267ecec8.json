{"ast":null,"code":"var _jsxFileName = \"/Users/sumitkumar/Desktop/Arogya/Frontend/arogyaPatient/src/components/ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, Outlet } from 'react-router-dom';\nimport axios from 'axios';\nimport { LoaderCircle } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Api = 'http://localhost:8099'; // Your API endpoint\n\nconst ProtectedRoute = ({\n  allowedRoles\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthorized, setIsAuthorized] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('authToken');\n      if (!token) {\n        navigate('/login'); // If no token, redirect to login page\n        return;\n      }\n      try {\n        // Send the token to the backend for verification\n        const response = await axios.get(`${Api}/verifyTokenUser`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        // Check if the user's role from the token is allowed for this route\n        const userRole = response.data.user.role;\n        lo;\n        if (allowedRoles && allowedRoles.includes(userRole)) {\n          setIsAuthorized(true);\n        } else {\n          // If the user has a valid token but the wrong role, redirect\n          navigate('/login'); // Or to an \"Unauthorized\" page\n        }\n      } catch (error) {\n        console.error(\"Authentication check failed:\", error);\n        localStorage.removeItem('authToken'); // Clear the invalid token\n        navigate('/login');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n  }, [navigate, allowedRoles]);\n\n  // While checking, display a loading indicator\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-screen bg-gray-100\",\n      children: /*#__PURE__*/_jsxDEV(LoaderCircle, {\n        className: \"h-12 w-12 animate-spin text-blue-600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If authorized, render the child route (e.g., PatientPortal). \n  // Otherwise, the user will have been redirected.\n  return isAuthorized ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 25\n  }, this) : null;\n};\n_s(ProtectedRoute, \"YHodVSP+tb2t154GUdCQH+9SMIE=\", false, function () {\n  return [useNavigate];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Outlet","axios","LoaderCircle","jsxDEV","_jsxDEV","Api","ProtectedRoute","allowedRoles","_s","isLoading","setIsLoading","isAuthorized","setIsAuthorized","navigate","checkAuth","token","localStorage","getItem","response","get","headers","userRole","data","user","role","lo","includes","error","console","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sumitkumar/Desktop/Arogya/Frontend/arogyaPatient/src/components/ProtectedRoute.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, Outlet } from 'react-router-dom';\nimport axios from 'axios';\nimport { LoaderCircle } from 'lucide-react';\n\nconst Api = 'http://localhost:8099'; // Your API endpoint\n\nconst ProtectedRoute = ({ allowedRoles }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthorized, setIsAuthorized] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('authToken');\n      if (!token) {\n        navigate('/login'); // If no token, redirect to login page\n        return;\n      }\n\n      try {\n        // Send the token to the backend for verification\n        const response = await axios.get(`${Api}/verifyTokenUser`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        // Check if the user's role from the token is allowed for this route\n        const userRole = response.data.user.role;\n        lo\n        if (allowedRoles && allowedRoles.includes(userRole)) {\n          setIsAuthorized(true);\n        } else {\n          // If the user has a valid token but the wrong role, redirect\n          navigate('/login'); // Or to an \"Unauthorized\" page\n        }\n      } catch (error) {\n        console.error(\"Authentication check failed:\", error);\n        localStorage.removeItem('authToken'); // Clear the invalid token\n        navigate('/login');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, [navigate, allowedRoles]);\n\n  // While checking, display a loading indicator\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen bg-gray-100\">\n        <LoaderCircle className=\"h-12 w-12 animate-spin text-blue-600\" />\n      </div>\n    );\n  }\n\n  // If authorized, render the child route (e.g., PatientPortal). \n  // Otherwise, the user will have been redirected.\n  return isAuthorized ? <Outlet /> : null;\n};\n\nexport default ProtectedRoute;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AACtD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,GAAG,GAAG,uBAAuB,CAAC,CAAC;;AAErC,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMgB,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMgB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAC/C,IAAI,CAACF,KAAK,EAAE;QACVF,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QACpB;MACF;MAEA,IAAI;QACF;QACA,MAAMK,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,GAAGd,GAAG,kBAAkB,EAAE;UACzDe,OAAO,EAAE;YACP,eAAe,EAAE,UAAUL,KAAK;UAClC;QACF,CAAC,CAAC;;QAEF;QACA,MAAMM,QAAQ,GAAGH,QAAQ,CAACI,IAAI,CAACC,IAAI,CAACC,IAAI;QACxCC,EAAE;QACF,IAAIlB,YAAY,IAAIA,YAAY,CAACmB,QAAQ,CAACL,QAAQ,CAAC,EAAE;UACnDT,eAAe,CAAC,IAAI,CAAC;QACvB,CAAC,MAAM;UACL;UACAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QACtB;MACF,CAAC,CAAC,OAAOc,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDX,YAAY,CAACa,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QACtChB,QAAQ,CAAC,QAAQ,CAAC;MACpB,CAAC,SAAS;QACRH,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDI,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACD,QAAQ,EAAEN,YAAY,CAAC,CAAC;;EAE5B;EACA,IAAIE,SAAS,EAAE;IACb,oBACEL,OAAA;MAAK0B,SAAS,EAAC,uDAAuD;MAAAC,QAAA,eACpE3B,OAAA,CAACF,YAAY;QAAC4B,SAAS,EAAC;MAAsC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC;EAEV;;EAEA;EACA;EACA,OAAOxB,YAAY,gBAAGP,OAAA,CAACJ,MAAM;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,GAAG,IAAI;AACzC,CAAC;AAAC3B,EAAA,CAtDIF,cAAc;EAAA,QAGDP,WAAW;AAAA;AAAAqC,EAAA,GAHxB9B,cAAc;AAwDpB,eAAeA,cAAc;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}